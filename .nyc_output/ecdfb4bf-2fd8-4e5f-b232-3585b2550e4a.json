{"/home/usuario/ull-esit-inf-dsi-22-23-prct06-generics-solid-Adrian-glz01/src/ejercicio-pe102.ts":{"path":"/home/usuario/ull-esit-inf-dsi-22-23-prct06-generics-solid-Adrian-glz01/src/ejercicio-pe102.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":77}},"2":{"start":{"line":5,"column":16},"end":{"line":5,"column":18}},"3":{"start":{"line":11,"column":8},"end":{"line":11,"column":37}},"4":{"start":{"line":19,"column":8},"end":{"line":19,"column":37}},"5":{"start":{"line":26,"column":8},"end":{"line":26,"column":37}},"6":{"start":{"line":29,"column":0},"end":{"line":29,"column":56}},"7":{"start":{"line":39,"column":8},"end":{"line":39,"column":36}},"8":{"start":{"line":40,"column":8},"end":{"line":40,"column":40}},"9":{"start":{"line":47,"column":8},"end":{"line":47,"column":31}},"10":{"start":{"line":54,"column":8},"end":{"line":54,"column":33}},"11":{"start":{"line":62,"column":8},"end":{"line":62,"column":166}},"12":{"start":{"line":70,"column":8},"end":{"line":70,"column":166}},"13":{"start":{"line":78,"column":8},"end":{"line":78,"column":118}},"14":{"start":{"line":86,"column":8},"end":{"line":86,"column":118}},"15":{"start":{"line":89,"column":0},"end":{"line":89,"column":28}},"16":{"start":{"line":99,"column":8},"end":{"line":99,"column":26}},"17":{"start":{"line":100,"column":8},"end":{"line":100,"column":36}},"18":{"start":{"line":107,"column":8},"end":{"line":107,"column":26}},"19":{"start":{"line":114,"column":8},"end":{"line":114,"column":31}},"20":{"start":{"line":122,"column":24},"end":{"line":122,"column":61}},"21":{"start":{"line":123,"column":24},"end":{"line":123,"column":71}},"22":{"start":{"line":124,"column":23},"end":{"line":124,"column":52}},"23":{"start":{"line":125,"column":8},"end":{"line":125,"column":22}},"24":{"start":{"line":133,"column":24},"end":{"line":133,"column":61}},"25":{"start":{"line":134,"column":24},"end":{"line":134,"column":71}},"26":{"start":{"line":135,"column":23},"end":{"line":135,"column":52}},"27":{"start":{"line":136,"column":8},"end":{"line":136,"column":22}},"28":{"start":{"line":144,"column":24},"end":{"line":144,"column":195}},"29":{"start":{"line":145,"column":24},"end":{"line":145,"column":195}},"30":{"start":{"line":146,"column":23},"end":{"line":146,"column":52}},"31":{"start":{"line":147,"column":8},"end":{"line":147,"column":22}},"32":{"start":{"line":155,"column":24},"end":{"line":155,"column":115}},"33":{"start":{"line":156,"column":24},"end":{"line":156,"column":115}},"34":{"start":{"line":157,"column":23},"end":{"line":157,"column":52}},"35":{"start":{"line":158,"column":8},"end":{"line":158,"column":22}},"36":{"start":{"line":161,"column":0},"end":{"line":161,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":31},"end":{"line":12,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":29},"end":{"line":20,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":32},"end":{"line":27,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":40},"end":{"line":41,"column":5}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":19},"end":{"line":48,"column":5}},"line":46},"5":{"name":"(anonymous_5)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":21},"end":{"line":55,"column":5}},"line":53},"6":{"name":"(anonymous_6)","decl":{"start":{"line":61,"column":4},"end":{"line":61,"column":5}},"loc":{"start":{"line":61,"column":18},"end":{"line":63,"column":5}},"line":61},"7":{"name":"(anonymous_7)","decl":{"start":{"line":69,"column":4},"end":{"line":69,"column":5}},"loc":{"start":{"line":69,"column":24},"end":{"line":71,"column":5}},"line":69},"8":{"name":"(anonymous_8)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":21},"end":{"line":79,"column":5}},"line":77},"9":{"name":"(anonymous_9)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":23},"end":{"line":87,"column":5}},"line":85},"10":{"name":"(anonymous_10)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":33},"end":{"line":101,"column":5}},"line":98},"11":{"name":"(anonymous_11)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":20},"end":{"line":108,"column":5}},"line":106},"12":{"name":"(anonymous_12)","decl":{"start":{"line":113,"column":4},"end":{"line":113,"column":5}},"loc":{"start":{"line":113,"column":25},"end":{"line":115,"column":5}},"line":113},"13":{"name":"(anonymous_13)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":18},"end":{"line":126,"column":5}},"line":121},"14":{"name":"(anonymous_14)","decl":{"start":{"line":132,"column":4},"end":{"line":132,"column":5}},"loc":{"start":{"line":132,"column":24},"end":{"line":137,"column":5}},"line":132},"15":{"name":"(anonymous_15)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":21},"end":{"line":148,"column":5}},"line":143},"16":{"name":"(anonymous_16)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":23},"end":{"line":159,"column":5}},"line":154}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":3,"4":6,"5":1,"6":1,"7":7,"8":7,"9":10,"10":13,"11":2,"12":1,"13":1,"14":1,"15":1,"16":9,"17":9,"18":14,"19":16,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1},"f":{"0":3,"1":6,"2":1,"3":7,"4":10,"5":13,"6":2,"7":1,"8":1,"9":1,"10":9,"11":14,"12":16,"13":1,"14":1,"15":1,"16":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-22-23-prct06-generics-solid-Adrian-glz01/src/ejercicio-pe102.ts","sources":["/home/usuario/ull-esit-inf-dsi-22-23-prct06-generics-solid-Adrian-glz01/src/ejercicio-pe102.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Interfaz generica para operaciones aritmeticas\n */\nexport interface Arithmeticable<T> {\n  add(operando1: T): T\n  substract(operando1: T): T\n  divide(operando1: T): T\n  multiply(operando1: T): T\n}\n\nexport class ArithmeticalCollection<T extends Arithmeticable<T>> {\n  private _elements: T[] = []\n\n  /**\n   * Mwtodo para añadir elementos a la coleccion\n   * @param element \n   */\n  addArithmeticable(element: T) {\n    this._elements.push(element)\n  }\n\n  /**\n   * Metodo para obtener un elemento de la coleccion, otorgando su indice\n   * @param index \n   * @returns \n   */\n  getArithmeticable(index: number): T {\n    return this._elements[index]\n  }\n\n  /**\n   * Metodo para obtener el numero de elementos de la coleccion\n   * @returns\n   */\n  getNumbeOfArithmeticables(): number {\n    return this._elements.length\n  }\n}\n\nexport class Rational implements Arithmeticable<Rational> {\n  private _numerator: number\n  private _denominator: number\n\n  /**\n   * Constructor de la clase Rational\n   * @param numerator \n   * @param denominator \n   */\n  constructor(numerator: number, denominator: number) {\n    this._numerator = numerator\n    this._denominator = denominator\n  }\n\n  /**\n   * Metodo para obtener el numerador\n   * @returns \n   */\n  public getNumerator(): number {\n    return this._numerator\n  }\n\n  /**\n   * Metodo para obtener el denominador\n   * @returns \n   */\n  public getDenominator(): number {\n    return this._denominator\n  }\n\n  /**\n   * Metodo para sumar dos numeros racionales\n   * @param operando \n   * @returns \n   */\n  add(operando: Rational): Rational{\n    return new Rational(\n      this._numerator * operando.getDenominator() + operando.getNumerator() * this._denominator,\n      this._denominator * operando.getDenominator()\n    )\n  }\n\n  /**\n   * Metodo para restar dos numeros racionales\n   * @param operando \n   * @returns \n   */\n  substract(operando: Rational): Rational{\n    return new Rational(\n      this._numerator * operando.getDenominator() - operando.getNumerator() * this._denominator,\n      this._denominator * operando.getDenominator()\n    )\n  }\n\n  /**\n   * Metodo para dividir dos numeros racionales\n   * @param operando \n   * @returns \n   */\n  divide(operando: Rational): Rational{\n    return new Rational(\n      this._numerator * operando.getDenominator(),\n      this._denominator * operando.getNumerator()\n    )\n  }\n\n  /**\n   * Metodo para multiplicar dos numeros racionales\n   * @param operando \n   * @returns \n   */\n  multiply(operando: Rational): Rational{\n    return new Rational(\n      this._numerator * operando.getNumerator(),\n      this._denominator * operando.getDenominator()\n    )\n  }\n}\n\nexport class Complex implements Arithmeticable<Complex> {\n  private _real: number\n  private _imaginary: number\n\n  /**\n   * Constructor de la clase Complex\n   * @param real \n   * @param imaginary \n   */\n  constructor(real: number, imaginary: number) {\n    this._real = real\n    this._imaginary = imaginary\n  }\n\n  /**\n   * Metodo para obtener la parte real del numero complejo\n   * @returns \n   */\n  public getRealNumbER(): number {\n    return this._real\n  }\n\n  /**\n   * Metodo para obtener la parte imaginaria del numero complejo\n   * @returns \n   */\n  public getImaginaryNumber(): number {\n    return this._imaginary\n  }\n\n  /**\n   * Metodo para sumar dos numeros complejos\n   * @param operando \n   * @returns \n   */\n  add (operando: Complex): Complex {\n    const result1 = this._real + operando.getRealNumbER();\n    const result2 = this._imaginary + operando.getImaginaryNumber();\n    const result = new Complex(result1, result2);\n    return result;\n  }\n\n  /**\n   * Metodo para restar dos numeros complejos\n   * @param operando \n   * @returns \n   */\n  substract (operando: Complex): Complex {\n    const result1 = this._real - operando.getRealNumbER();\n    const result2 = this._imaginary - operando.getImaginaryNumber();\n    const result = new Complex(result1, result2);\n    return result;\n  }\n\n  /**\n   * Metodo para dividir dos numeros complejos\n   * @param operando \n   * @returns \n   */\n  divide (operando: Complex): Complex {\n    const result1 = ((this._real * operando.getRealNumbER()) + (this._imaginary * operando.getImaginaryNumber())) / (Math.pow(this._imaginary,2) + Math.pow(operando.getImaginaryNumber(),2))\n    const result2 =  ((this._imaginary * operando.getRealNumbER()) - (this._real * operando.getImaginaryNumber()))/ (Math.pow(this._imaginary,2) + Math.pow(operando.getImaginaryNumber(),2))\n    const result = new Complex(result1, result2);\n    return result\n  }\n\n\n  /**\n   * Metodo para multiplicar dos numeros complejos\n   * @param operando \n   * @returns \n   */\n  multiply (operando: Complex): Complex {\n    const result1 = (this._real * operando.getRealNumbER()) - (this._imaginary * operando.getImaginaryNumber());\n    const result2 = (this._real * operando.getImaginaryNumber()) + (this._imaginary * operando.getRealNumbER());\n    const result = new Complex(result1, result2);\n    return result\n  }\n\n\n}\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1d881b0a86bbc3b2915d854228967c1cfd4c338a","contentHash":"dae5abc142198a218a1a08ccec54fb997e7f5c07cf703efa6db37e770a329b65"}}